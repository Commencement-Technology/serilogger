{"code":"import { LogEventLevel, LogEvent } from './logEvent';\r\nimport { MessageTemplate } from './messageTemplate';\r\n/**\r\n * Logs events.\r\n */\r\nvar Logger = /** @class */ (function () {\r\n    /**\r\n     * Creates a new logger instance using the specified pipeline.\r\n     */\r\n    function Logger(pipeline, suppressErrors) {\r\n        this.suppressErrors = true;\r\n        this.pipeline = pipeline;\r\n        this.suppressErrors = typeof suppressErrors === 'undefined' || suppressErrors;\r\n    }\r\n    Logger.prototype.fatal = function (errorOrMessageTemplate) {\r\n        var properties = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            properties[_i - 1] = arguments[_i];\r\n        }\r\n        try {\r\n            if (errorOrMessageTemplate instanceof Error) {\r\n                this.write(LogEventLevel.fatal, properties[0], properties.slice(1), errorOrMessageTemplate);\r\n            }\r\n            else {\r\n                this.write(LogEventLevel.fatal, errorOrMessageTemplate, properties);\r\n            }\r\n        }\r\n        catch (error) {\r\n            if (!this.suppressErrors) {\r\n                throw error;\r\n            }\r\n        }\r\n    };\r\n    Logger.prototype.error = function (errorOrMessageTemplate) {\r\n        var properties = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            properties[_i - 1] = arguments[_i];\r\n        }\r\n        try {\r\n            if (errorOrMessageTemplate instanceof Error) {\r\n                this.write(LogEventLevel.error, properties[0], properties.slice(1), errorOrMessageTemplate);\r\n            }\r\n            else {\r\n                this.write(LogEventLevel.error, errorOrMessageTemplate, properties);\r\n            }\r\n        }\r\n        catch (error) {\r\n            if (!this.suppressErrors) {\r\n                throw error;\r\n            }\r\n        }\r\n    };\r\n    Logger.prototype.warn = function (errorOrMessageTemplate) {\r\n        var properties = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            properties[_i - 1] = arguments[_i];\r\n        }\r\n        try {\r\n            if (errorOrMessageTemplate instanceof Error) {\r\n                this.write(LogEventLevel.warning, properties[0], properties.slice(1), errorOrMessageTemplate);\r\n            }\r\n            else {\r\n                this.write(LogEventLevel.warning, errorOrMessageTemplate, properties);\r\n            }\r\n        }\r\n        catch (error) {\r\n            if (!this.suppressErrors) {\r\n                throw error;\r\n            }\r\n        }\r\n    };\r\n    Logger.prototype.info = function (errorOrMessageTemplate) {\r\n        var properties = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            properties[_i - 1] = arguments[_i];\r\n        }\r\n        try {\r\n            if (errorOrMessageTemplate instanceof Error) {\r\n                this.write(LogEventLevel.information, properties[0], properties.slice(1), errorOrMessageTemplate);\r\n            }\r\n            else {\r\n                this.write(LogEventLevel.information, errorOrMessageTemplate, properties);\r\n            }\r\n        }\r\n        catch (error) {\r\n            if (!this.suppressErrors) {\r\n                throw error;\r\n            }\r\n        }\r\n    };\r\n    Logger.prototype.debug = function (errorOrMessageTemplate) {\r\n        var properties = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            properties[_i - 1] = arguments[_i];\r\n        }\r\n        try {\r\n            if (errorOrMessageTemplate instanceof Error) {\r\n                this.write(LogEventLevel.debug, properties[0], properties.slice(1), errorOrMessageTemplate);\r\n            }\r\n            else {\r\n                this.write(LogEventLevel.debug, errorOrMessageTemplate, properties);\r\n            }\r\n        }\r\n        catch (error) {\r\n            if (!this.suppressErrors) {\r\n                throw error;\r\n            }\r\n        }\r\n    };\r\n    Logger.prototype.verbose = function (errorOrMessageTemplate) {\r\n        var properties = [];\r\n        for (var _i = 1; _i < arguments.length; _i++) {\r\n            properties[_i - 1] = arguments[_i];\r\n        }\r\n        try {\r\n            if (errorOrMessageTemplate instanceof Error) {\r\n                this.write(LogEventLevel.verbose, properties[0], properties.slice(1), errorOrMessageTemplate);\r\n            }\r\n            else {\r\n                this.write(LogEventLevel.verbose, errorOrMessageTemplate, properties);\r\n            }\r\n        }\r\n        catch (error) {\r\n            if (!this.suppressErrors) {\r\n                throw error;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Flushes the pipeline of this logger.\r\n     * @returns A {Promise<any>} that will resolve when the pipeline has been flushed.\r\n     */\r\n    Logger.prototype.flush = function () {\r\n        return this.suppressErrors\r\n            ? this.pipeline.flush().catch(function () {\r\n            })\r\n            : this.pipeline.flush();\r\n    };\r\n    /**\r\n     * Emits events through this logger's pipeline.\r\n     */\r\n    Logger.prototype.emit = function (events) {\r\n        try {\r\n            this.pipeline.emit(events);\r\n            return events;\r\n        }\r\n        catch (error) {\r\n            if (!this.suppressErrors) {\r\n                throw error;\r\n            }\r\n            return [];\r\n        }\r\n    };\r\n    Logger.prototype.write = function (level, rawMessageTemplate, unboundProperties, error) {\r\n        var messageTemplate = new MessageTemplate(rawMessageTemplate);\r\n        var properties = messageTemplate.bindProperties(unboundProperties);\r\n        var logEvent = new LogEvent(new Date().toISOString(), level, messageTemplate, properties, error);\r\n        this.pipeline.emit([logEvent]);\r\n    };\r\n    return Logger;\r\n}());\r\nexport { Logger };\r\n","references":["C:/Users/bryce/Google Drive/Development/serilogger/src/logEvent.ts","C:/Users/bryce/Google Drive/Development/serilogger/src/messageTemplate.ts","C:/Users/bryce/Google Drive/Development/serilogger/src/pipeline.ts","C:/Users/bryce/Google Drive/Development/serilogger/src/sink.ts"],"dts":{"name":"C:/Users/bryce/Google Drive/Development/serilogger/logger.d.ts","writeByteOrderMark":false,"text":"import { LogEvent } from './logEvent';\r\nimport { Pipeline } from './pipeline';\r\nimport { Sink } from './sink';\r\n/**\r\n * Logs events.\r\n */\r\nexport declare class Logger implements Sink {\r\n    private pipeline;\r\n    suppressErrors: boolean;\r\n    /**\r\n     * Creates a new logger instance using the specified pipeline.\r\n     */\r\n    constructor(pipeline: Pipeline, suppressErrors?: boolean);\r\n    /**\r\n     * Logs an event with the {LogEventLevel.fatal} severity.\r\n     * @param {string} messageTemplate Message template for the log event.\r\n     * @param {any[]} properties Properties that can be used to render the message template.\r\n     */\r\n    fatal(messageTemplate: string, ...properties: any[]): void;\r\n    /**\r\n     * Logs an event with the {LogEventLevel.fatal} severity.\r\n     * @param {Error} error Error for the log event.\r\n     * @param {string} messageTemplate Message template for the log event.\r\n     * @param {any[]} properties Properties that can be used to render the message template.\r\n     */\r\n    fatal(error: Error, messageTemplate: string, ...properties: any[]): void;\r\n    /**\r\n     * Logs an event with the {LogEventLevel.error} severity.\r\n     * @param {string} messageTemplate Message template for the log event.\r\n     * @param {any[]} properties Properties that can be used to render the message template.\r\n     */\r\n    error(messageTemplate: string, ...properties: any[]): void;\r\n    /**\r\n     * Logs an event with the {LogEventLevel.error} severity.\r\n     * @param {Error} error Error for the log event.\r\n     * @param {string} messageTemplate Message template for the log event.\r\n     * @param {any[]} properties Properties that can be used to render the message template.\r\n     */\r\n    error(error: Error, messageTemplate: string, ...properties: any[]): void;\r\n    /**\r\n     * Logs an event with the {LogEventLevel.warning} severity.\r\n     * @param {string} messageTemplate Message template for the log event.\r\n     * @param {any[]} properties Properties that can be used to render the message template.\r\n     */\r\n    warn(messageTemplate: string, ...properties: any[]): void;\r\n    /**\r\n     * Logs an event with the {LogEventLevel.warning} severity.\r\n     * @param {Error} error Error for the log event.\r\n     * @param {string} messageTemplate Message template for the log event.\r\n     * @param {any[]} properties Properties that can be used to render the message template.\r\n     */\r\n    warn(error: Error, messageTemplate: string, ...properties: any[]): void;\r\n    /**\r\n     * Logs an event with the {LogEventLevel.information} severity.\r\n     * @param {string} messageTemplate Message template for the log event.\r\n     * @param {any[]} properties Properties that can be used to render the message template.\r\n     */\r\n    info(messageTemplate: string, ...properties: any[]): void;\r\n    /**\r\n     * Logs an event with the {LogEventLevel.information} severity.\r\n     * @param {Error} error Error for the log event.\r\n     * @param {string} messageTemplate Message template for the log event.\r\n     * @param {any[]} properties Properties that can be used to render the message template.\r\n     */\r\n    info(error: Error, messageTemplate: string, ...properties: any[]): void;\r\n    /**\r\n     * Logs an event with the {LogEventLevel.debug} severity.\r\n     * @param {string} messageTemplate Message template for the log event.\r\n     * @param {any[]} properties Properties that can be used to render the message template.\r\n     */\r\n    debug(messageTemplate: string, ...properties: any[]): void;\r\n    /**\r\n     * Logs an event with the {LogEventLevel.debug} severity.\r\n     * @param {Error} error Error for the log event.\r\n     * @param {string} messageTemplate Message template for the log event.\r\n     * @param {any[]} properties Properties that can be used to render the message template.\r\n     */\r\n    debug(error: Error, messageTemplate: string, ...properties: any[]): void;\r\n    /**\r\n     * Logs an event with the {LogEventLevel.verbose} severity.\r\n     * @param {string} messageTemplate Message template for the log event.\r\n     * @param {any[]} properties Properties that can be used to render the message template.\r\n     */\r\n    verbose(messageTemplate: string, ...properties: any[]): void;\r\n    /**\r\n     * Logs an event with the {LogEventLevel.verbose} severity.\r\n     * @param {Error} error Error for the log event.\r\n     * @param {string} messageTemplate Message template for the log event.\r\n     * @param {any[]} properties Properties that can be used to render the message template.\r\n     */\r\n    verbose(error: Error, messageTemplate: string, ...properties: any[]): void;\r\n    /**\r\n     * Flushes the pipeline of this logger.\r\n     * @returns A {Promise<any>} that will resolve when the pipeline has been flushed.\r\n     */\r\n    flush(): Promise<any>;\r\n    /**\r\n     * Emits events through this logger's pipeline.\r\n     */\r\n    emit(events: LogEvent[]): LogEvent[];\r\n    private write;\r\n}\r\n"}}
