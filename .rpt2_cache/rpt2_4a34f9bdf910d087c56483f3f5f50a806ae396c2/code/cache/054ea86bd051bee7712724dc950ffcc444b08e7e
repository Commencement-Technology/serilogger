{"code":"/**\r\n * Represents the severity level of a log event.\r\n */\r\nexport var LogEventLevel;\r\n(function (LogEventLevel) {\r\n    LogEventLevel[LogEventLevel[\"off\"] = 0] = \"off\";\r\n    LogEventLevel[LogEventLevel[\"fatal\"] = 1] = \"fatal\";\r\n    LogEventLevel[LogEventLevel[\"error\"] = 3] = \"error\";\r\n    LogEventLevel[LogEventLevel[\"warning\"] = 7] = \"warning\";\r\n    LogEventLevel[LogEventLevel[\"information\"] = 15] = \"information\";\r\n    LogEventLevel[LogEventLevel[\"debug\"] = 31] = \"debug\";\r\n    LogEventLevel[LogEventLevel[\"verbose\"] = 63] = \"verbose\";\r\n})(LogEventLevel || (LogEventLevel = {}));\r\n/**\r\n * Checks if a log event level includes the target log event level.\r\n * @param {LogEventLevel} level The level to check.\r\n * @param {LogEventLevel} target The target level.\r\n * @returns True if the checked level contains the target level, or if the checked level is undefined.\r\n */\r\nexport function isEnabled(level, target) {\r\n    return typeof level === 'undefined' || (level & target) === target;\r\n}\r\n/**\r\n * Represents a log event.\r\n */\r\nvar LogEvent = /** @class */ (function () {\r\n    /**\r\n     * Creates a new log event instance.\r\n     */\r\n    function LogEvent(timestamp, level, messageTemplate, properties, error) {\r\n        this.timestamp = timestamp;\r\n        this.level = level;\r\n        this.messageTemplate = messageTemplate;\r\n        this.properties = properties || {};\r\n        this.error = error || undefined;\r\n    }\r\n    return LogEvent;\r\n}());\r\nexport { LogEvent };\r\n","references":["C:/Users/bryce/Google Drive/Development/serilogger/src/messageTemplate.ts"],"dts":{"name":"C:/Users/bryce/Google Drive/Development/serilogger/logEvent.d.ts","writeByteOrderMark":false,"text":"import { MessageTemplate } from './messageTemplate';\r\n/**\r\n * Represents the severity level of a log event.\r\n */\r\nexport declare enum LogEventLevel {\r\n    off = 0,\r\n    fatal = 1,\r\n    error = 3,\r\n    warning = 7,\r\n    information = 15,\r\n    debug = 31,\r\n    verbose = 63\r\n}\r\n/**\r\n * Represents an object that can switch between log levels.\r\n */\r\nexport interface LogEventLevelSwitch<T> {\r\n    fatal(): T;\r\n    error(): T;\r\n    warning(): T;\r\n    information(): T;\r\n    debug(): T;\r\n    verbose(): T;\r\n}\r\n/**\r\n * Checks if a log event level includes the target log event level.\r\n * @param {LogEventLevel} level The level to check.\r\n * @param {LogEventLevel} target The target level.\r\n * @returns True if the checked level contains the target level, or if the checked level is undefined.\r\n */\r\nexport declare function isEnabled(level: LogEventLevel | undefined, target: LogEventLevel): boolean;\r\n/**\r\n * Represents a log event.\r\n */\r\nexport declare class LogEvent {\r\n    /**\r\n     * Creates a new log event instance.\r\n     */\r\n    constructor(timestamp: string, level: LogEventLevel, messageTemplate: MessageTemplate, properties?: Object, error?: Error);\r\n    /**\r\n     * Gets or sets an ISO 8601-formatted date string for when this event occurred.\r\n     * @example YYYY-MM-DDTHH:mm:ss.sssZ\r\n     */\r\n    timestamp: string;\r\n    /**\r\n     * Gets or sets the severity level of this event.\r\n     */\r\n    level: LogEventLevel;\r\n    /**\r\n     * Gets or sets the message template instance of this event.\r\n     */\r\n    messageTemplate: MessageTemplate;\r\n    /**\r\n     * Gets or sets an object containing the captured properties of this event.\r\n     */\r\n    properties: Object;\r\n    /**\r\n     * Gets or sets an error associated with this event.\r\n     */\r\n    error?: Error;\r\n}\r\n"}}
