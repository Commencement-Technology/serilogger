{"code":"import { Pipeline } from './pipeline';\r\nimport { Logger } from './logger';\r\nimport { LogEventLevel, isEnabled } from './logEvent';\r\nimport { DynamicLevelSwitch, DynamicLevelSwitchStage } from './dynamicLevelSwitch';\r\nimport { FilterStage } from './filterStage';\r\nimport { SinkStage } from './sink';\r\nimport { EnrichStage } from './enrichStage';\r\n/**\r\n * Configures pipelines for new logger instances.\r\n */\r\nvar LoggerConfiguration = /** @class */ (function () {\r\n    function LoggerConfiguration() {\r\n        var _this = this;\r\n        /**\r\n         * Sets the minimum level for any subsequent stages in the pipeline.\r\n         */\r\n        this.minLevel = Object.assign(function (levelOrSwitch) {\r\n            if (typeof levelOrSwitch === 'undefined' || levelOrSwitch === null) {\r\n                throw new TypeError('Argument \"levelOrSwitch\" is not a valid LogEventLevel value or DynamicLevelSwitch instance.');\r\n            }\r\n            else if (levelOrSwitch instanceof DynamicLevelSwitch) {\r\n                var switchStage = new DynamicLevelSwitchStage(levelOrSwitch);\r\n                var flush = _this._pipeline.flush;\r\n                switchStage.setFlushDelegate(function () { return _this._pipeline.flush(); });\r\n                _this._pipeline.addStage(switchStage);\r\n                return _this;\r\n            }\r\n            else if (typeof levelOrSwitch === 'string') {\r\n                var level_1 = LogEventLevel[levelOrSwitch.toLowerCase()];\r\n                if (typeof level_1 === 'undefined' || level_1 === null) {\r\n                    throw new TypeError('Argument \"levelOrSwitch\" is not a valid LogEventLevel value.');\r\n                }\r\n                return _this.filter(function (e) { return isEnabled(level_1, e.level); });\r\n            }\r\n            else {\r\n                return _this.filter(function (e) { return isEnabled(levelOrSwitch, e.level); });\r\n            }\r\n        }, {\r\n            fatal: function () { return _this.minLevel(LogEventLevel.fatal); },\r\n            error: function () { return _this.minLevel(LogEventLevel.error); },\r\n            warning: function () { return _this.minLevel(LogEventLevel.warning); },\r\n            information: function () { return _this.minLevel(LogEventLevel.information); },\r\n            debug: function () { return _this.minLevel(LogEventLevel.debug); },\r\n            verbose: function () { return _this.minLevel(LogEventLevel.verbose); }\r\n        });\r\n        this._pipeline = new Pipeline();\r\n        this._suppressErrors = true;\r\n    }\r\n    /**\r\n     * Adds a sink to the pipeline.\r\n     * @param {Sink} sink The sink to add.\r\n     */\r\n    LoggerConfiguration.prototype.writeTo = function (sink) {\r\n        this._pipeline.addStage(new SinkStage(sink));\r\n        return this;\r\n    };\r\n    /**\r\n     * Adds a filter to the pipeline.\r\n     * @param {(e: LogEvent) => boolean} predicate Filter predicate to use.\r\n     */\r\n    LoggerConfiguration.prototype.filter = function (predicate) {\r\n        if (predicate instanceof Function) {\r\n            this._pipeline.addStage(new FilterStage(predicate));\r\n        }\r\n        else {\r\n            throw new TypeError('Argument \"predicate\" must be a function.');\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Adds an enricher to the pipeline.\r\n     */\r\n    LoggerConfiguration.prototype.enrich = function (enricher) {\r\n        if (enricher instanceof Function) {\r\n            this._pipeline.addStage(new EnrichStage(enricher));\r\n        }\r\n        else {\r\n            throw new TypeError('Argument \"enricher\" must be either a function or an object.');\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Enable or disable error suppression.\r\n     */\r\n    LoggerConfiguration.prototype.suppressErrors = function (suppress) {\r\n        this._suppressErrors = typeof suppress === 'undefined' || suppress;\r\n        return this;\r\n    };\r\n    /**\r\n     * Creates a new logger instance based on this configuration.\r\n     */\r\n    LoggerConfiguration.prototype.create = function () {\r\n        return new Logger(this._pipeline, this._suppressErrors);\r\n    };\r\n    return LoggerConfiguration;\r\n}());\r\nexport { LoggerConfiguration };\r\n","references":["C:/Users/bryce/Google Drive/Development/serilogger/src/pipeline.ts","C:/Users/bryce/Google Drive/Development/serilogger/src/logger.ts","C:/Users/bryce/Google Drive/Development/serilogger/src/logEvent.ts","C:/Users/bryce/Google Drive/Development/serilogger/src/dynamicLevelSwitch.ts","C:/Users/bryce/Google Drive/Development/serilogger/src/filterStage.ts","C:/Users/bryce/Google Drive/Development/serilogger/src/sink.ts","C:/Users/bryce/Google Drive/Development/serilogger/src/enrichStage.ts"],"dts":{"name":"C:/Users/bryce/Google Drive/Development/serilogger/loggerConfiguration.d.ts","writeByteOrderMark":false,"text":"import { Logger } from './logger';\r\nimport { LogEvent, LogEventLevel, LogEventLevelSwitch } from './logEvent';\r\nimport { DynamicLevelSwitch } from './dynamicLevelSwitch';\r\nimport { Sink } from './sink';\r\nimport { ObjectFactory } from './enrichStage';\r\nexport interface MinLevel extends LogEventLevelSwitch<LoggerConfiguration> {\r\n    (levelOrSwitch: LogEventLevel | string | number | DynamicLevelSwitch): LoggerConfiguration;\r\n}\r\n/**\r\n * Configures pipelines for new logger instances.\r\n */\r\nexport declare class LoggerConfiguration {\r\n    private readonly _pipeline;\r\n    private _suppressErrors;\r\n    constructor();\r\n    /**\r\n     * Adds a sink to the pipeline.\r\n     * @param {Sink} sink The sink to add.\r\n     */\r\n    writeTo(sink: Sink): LoggerConfiguration;\r\n    /**\r\n     * Sets the minimum level for any subsequent stages in the pipeline.\r\n     */\r\n    minLevel: MinLevel;\r\n    /**\r\n     * Adds a filter to the pipeline.\r\n     * @param {(e: LogEvent) => boolean} predicate Filter predicate to use.\r\n     */\r\n    filter(predicate: (e: LogEvent) => boolean): LoggerConfiguration;\r\n    /**\r\n     * Adds an enricher to the pipeline.\r\n     */\r\n    enrich(enricher: Object | ObjectFactory): LoggerConfiguration;\r\n    /**\r\n     * Enable or disable error suppression.\r\n     */\r\n    suppressErrors(suppress?: boolean): LoggerConfiguration;\r\n    /**\r\n     * Creates a new logger instance based on this configuration.\r\n     */\r\n    create(): Logger;\r\n}\r\n"}}
