{"code":"var tokenizer = /\\{@?\\w+}/g;\r\n/**\r\n * Represents a message template that can be rendered into a log message.\r\n */\r\nvar MessageTemplate = /** @class */ (function () {\r\n    /**\r\n     * Creates a new MessageTemplate instance with the given template.\r\n     */\r\n    function MessageTemplate(messageTemplate) {\r\n        if (messageTemplate === null || !messageTemplate.length) {\r\n            throw new Error('Argument \"messageTemplate\" is required.');\r\n        }\r\n        this.raw = messageTemplate;\r\n        this.tokens = this.tokenize(messageTemplate);\r\n    }\r\n    /**\r\n     * Renders this template using the given properties.\r\n     * @param {Object} properties Object containing the properties.\r\n     * @returns Rendered message.\r\n     */\r\n    MessageTemplate.prototype.render = function (properties) {\r\n        if (!this.tokens.length) {\r\n            return this.raw;\r\n        }\r\n        properties = properties || {};\r\n        var result = [];\r\n        for (var i = 0; i < this.tokens.length; ++i) {\r\n            var token = this.tokens[i];\r\n            if (typeof token.name === 'string') {\r\n                if (properties.hasOwnProperty(token.name)) {\r\n                    result.push(this.toText(properties[token.name]));\r\n                }\r\n                else {\r\n                    result.push(token.raw);\r\n                }\r\n            }\r\n            else {\r\n                result.push(token.text);\r\n            }\r\n        }\r\n        return result.join('');\r\n    };\r\n    /**\r\n     * Binds the given set of args to their matching tokens.\r\n     * @param {any} positionalArgs Arguments.\r\n     * @returns Object containing the properties.\r\n     */\r\n    MessageTemplate.prototype.bindProperties = function (positionalArgs) {\r\n        var result = {};\r\n        var nextArg = 0;\r\n        for (var i = 0; i < this.tokens.length && nextArg < positionalArgs.length; ++i) {\r\n            var token = this.tokens[i];\r\n            if (typeof token.name === 'string') {\r\n                var p = positionalArgs[nextArg];\r\n                result[token.name] = this.capture(p, token.destructure);\r\n                nextArg++;\r\n            }\r\n        }\r\n        while (nextArg < positionalArgs.length) {\r\n            var arg = positionalArgs[nextArg];\r\n            if (typeof arg !== 'undefined') {\r\n                result['a' + nextArg] = this.capture(arg);\r\n            }\r\n            nextArg++;\r\n        }\r\n        return result;\r\n    };\r\n    MessageTemplate.prototype.tokenize = function (template) {\r\n        var tokens = [];\r\n        var result;\r\n        var textStart = 0;\r\n        while ((result = tokenizer.exec(template)) !== null) {\r\n            if (result.index !== textStart) {\r\n                tokens.push({ text: template.slice(textStart, result.index) });\r\n            }\r\n            var destructure = false;\r\n            var token = result[0].slice(1, -1);\r\n            if (token.indexOf('@') === 0) {\r\n                token = token.slice(1);\r\n                destructure = true;\r\n            }\r\n            tokens.push({\r\n                name: token,\r\n                destructure: destructure,\r\n                raw: result[0]\r\n            });\r\n            textStart = tokenizer.lastIndex;\r\n        }\r\n        if (textStart >= 0 && textStart < template.length) {\r\n            tokens.push({ text: template.slice(textStart) });\r\n        }\r\n        return tokens;\r\n    };\r\n    MessageTemplate.prototype.toText = function (property) {\r\n        if (typeof property === 'undefined')\r\n            return 'undefined';\r\n        if (property === null)\r\n            return 'null';\r\n        if (typeof property === 'string')\r\n            return property;\r\n        if (typeof property === 'number')\r\n            return property.toString();\r\n        if (typeof property === 'boolean')\r\n            return property.toString();\r\n        if (typeof property.toISOString === 'function')\r\n            return property.toISOString();\r\n        if (typeof property === 'object') {\r\n            var s = JSON.stringify(property);\r\n            if (s.length > 70) {\r\n                s = s.slice(0, 67) + '...';\r\n            }\r\n            return s;\r\n        }\r\n        return property.toString();\r\n    };\r\n    ;\r\n    MessageTemplate.prototype.capture = function (property, destructure) {\r\n        if (typeof property === 'function') {\r\n            return property.toString();\r\n        }\r\n        if (typeof property === 'object') {\r\n            // null value will be automatically stringified as \"null\", in properties it will be as null\r\n            // otherwise it will throw an error\r\n            if (property === null) {\r\n                return property;\r\n            }\r\n            // Could use instanceof Date, but this way will be kinder\r\n            // to values passed from other contexts...\r\n            if (destructure || typeof property.toISOString === 'function') {\r\n                return property;\r\n            }\r\n            return property.toString();\r\n        }\r\n        return property;\r\n    };\r\n    return MessageTemplate;\r\n}());\r\nexport { MessageTemplate };\r\n","references":[],"dts":{"name":"C:/Users/bryce/Google Drive/Development/serilogger/messageTemplate.d.ts","writeByteOrderMark":false,"text":"/**\r\n * Represents a message template that can be rendered into a log message.\r\n */\r\nexport declare class MessageTemplate {\r\n    /**\r\n     * Gets or sets the raw message template of this instance.\r\n     */\r\n    raw: string;\r\n    private tokens;\r\n    /**\r\n     * Creates a new MessageTemplate instance with the given template.\r\n     */\r\n    constructor(messageTemplate: string);\r\n    /**\r\n     * Renders this template using the given properties.\r\n     * @param {Object} properties Object containing the properties.\r\n     * @returns Rendered message.\r\n     */\r\n    render(properties?: Object): string;\r\n    /**\r\n     * Binds the given set of args to their matching tokens.\r\n     * @param {any} positionalArgs Arguments.\r\n     * @returns Object containing the properties.\r\n     */\r\n    bindProperties(positionalArgs: any): Object;\r\n    private tokenize;\r\n    private toText;\r\n    private capture;\r\n}\r\n"}}
