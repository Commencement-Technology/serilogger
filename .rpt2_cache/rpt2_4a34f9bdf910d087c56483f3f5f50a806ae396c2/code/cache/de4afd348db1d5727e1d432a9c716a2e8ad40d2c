{"code":"import { LogEventLevel, isEnabled } from './logEvent';\r\nvar ConsoleSink = /** @class */ (function () {\r\n    function ConsoleSink(options) {\r\n        this.options = options || {};\r\n        var internalConsole = this.options.console || typeof console !== 'undefined' && console || null;\r\n        var stub = function () {\r\n        };\r\n        // console.debug is no-op for Node, so use console.log instead.\r\n        var nodeConsole = !this.options.console &&\r\n            typeof process !== 'undefined' &&\r\n            process.versions &&\r\n            process.versions.node;\r\n        this.console = {\r\n            error: (internalConsole && (internalConsole.error || internalConsole.log)) || stub,\r\n            warn: (internalConsole && (internalConsole.warn || internalConsole.log)) || stub,\r\n            info: (internalConsole && (internalConsole.info || internalConsole.log)) || stub,\r\n            debug: (internalConsole && ((!nodeConsole && internalConsole.debug) || internalConsole.log)) || stub,\r\n            log: (internalConsole && internalConsole.log) || stub\r\n        };\r\n    }\r\n    ConsoleSink.prototype.emit = function (events) {\r\n        for (var i = 0; i < events.length; ++i) {\r\n            var e = events[i];\r\n            if (!isEnabled(this.options.restrictedToMinimumLevel, e.level))\r\n                continue;\r\n            switch (e.level) {\r\n                case LogEventLevel.fatal:\r\n                    this.writeToConsole(this.console.error, 'Fatal', e);\r\n                    break;\r\n                case LogEventLevel.error:\r\n                    this.writeToConsole(this.console.error, 'Error', e);\r\n                    break;\r\n                case LogEventLevel.warning:\r\n                    this.writeToConsole(this.console.warn, 'Warning', e);\r\n                    break;\r\n                case LogEventLevel.information:\r\n                    this.writeToConsole(this.console.info, 'Information', e);\r\n                    break;\r\n                case LogEventLevel.debug:\r\n                    this.writeToConsole(this.console.debug, 'Debug', e);\r\n                    break;\r\n                case LogEventLevel.verbose:\r\n                    this.writeToConsole(this.console.debug, 'Verbose', e);\r\n                    break;\r\n                default:\r\n                    this.writeToConsole(this.console.log, 'Log', e);\r\n                    break;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    ConsoleSink.prototype.flush = function () {\r\n        return Promise.resolve();\r\n    };\r\n    ConsoleSink.prototype.writeToConsole = function (logMethod, prefix, e) {\r\n        var output = \"[\" + prefix + \"] \" + e.messageTemplate.render(e.properties);\r\n        if (this.options.includeTimestamps) {\r\n            output = e.timestamp + \" \" + output;\r\n        }\r\n        var values = [];\r\n        if (this.options.includeProperties) {\r\n            for (var key in e.properties) {\r\n                if (e.properties.hasOwnProperty(key)) {\r\n                    values.push(e.properties[key]);\r\n                }\r\n            }\r\n        }\r\n        if (e.error instanceof Error) {\r\n            values.push('\\n', e.error.message);\r\n        }\r\n        logMethod.apply(void 0, [output].concat(values));\r\n    };\r\n    return ConsoleSink;\r\n}());\r\nexport { ConsoleSink };\r\n","references":["C:/Users/bryce/Google Drive/Development/serilogger/src/logEvent.ts","C:/Users/bryce/Google Drive/Development/serilogger/src/sink.ts"],"dts":{"name":"C:/Users/bryce/Google Drive/Development/serilogger/consoleSink.d.ts","writeByteOrderMark":false,"text":"import { LogEventLevel, LogEvent } from './logEvent';\r\nimport { Sink } from './sink';\r\nexport interface ConsoleProxy {\r\n    error(message?: any, ...properties: any[]): any;\r\n    warn(message?: any, ...properties: any[]): any;\r\n    info(message?: any, ...properties: any[]): any;\r\n    debug(message?: any, ...properties: any[]): any;\r\n    log(message?: any, ...properties: any[]): any;\r\n}\r\nexport interface ConsoleSinkOptions {\r\n    console?: any;\r\n    includeTimestamps?: boolean;\r\n    includeProperties?: boolean;\r\n    restrictedToMinimumLevel?: LogEventLevel;\r\n}\r\nexport declare class ConsoleSink implements Sink {\r\n    private options;\r\n    private console;\r\n    constructor(options?: ConsoleSinkOptions);\r\n    emit(events: LogEvent[]): any;\r\n    flush(): Promise<void>;\r\n    private writeToConsole;\r\n}\r\n"}}
